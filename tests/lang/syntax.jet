// Jet Features. All possible features (excluding most operators)

var a = 23
var b = "Hello"
var c = 23.34
var d = 23u 
var e = 23.3432f
var f = "Hello" * 2 // String Multiplication
print(a) // 23

var g: int = 23
var h: str = "Hello"
var i: float64 = 23.3432f
var j: $(a) = 4324 // $(variable_name) <-- Typeof variable_name
var k: &int = &a
print(k) // 0x234fbf2 <-- Memory address of a

// List Declaration
var li = [1, 2, 3, 4, 5, 6, 7, 8]

var heap_allocation = box 23
var match_init = a.match {
  23 {
    "Is 23"
  }
  . {
    "Not 23"
  }
}

if a == 23 {
  var function_ptr = print
  function_ptr("Hello, World!")
} elif a * 2 == 33 {
  var some_thing = 23
} else {
  print("I have no friends!")
}

for 23 { // Prints Hi\n 23 times
  print("Hi\n")
}

for x 0..10 { // Print Hi\n 10 times
  print("Hi\n")
}

for n in li {
  print(n, '\n')
}

for {
  // Forever Run ...
}

print(li[2]) // 3
print(li[2 .. 6]) // [3, 4, 5, 6]

import module
import "https://github.com/aboss123/jetproject" // Github Imports

fn some_func(param1, param2, param3) { // Generic parameter types
  print($(param1))
}
some_func(243, 1, 1) // int
print($(some_func(222, "Hi", [1, 2, 3]))) // void


fn im_void() {
  print("This is actual 'console.log'");
}

LinkedList : struct {
  next: box LinkedList
}

LinkedList : struct[T](value: T, next: LinkedList? = None)
LinkedList[T].prepend = fn(self, value: T) {
  return LinkedList(value, self)
}
LinkedList[T].size = fn(self) {
  match self.next {
    None => 1,
    (next) => next.size() + 1
  }
}
LinkedList[T].stringify = fn(self) str {
  var fmt = match self.next {
    None => str(self.value),
    next => str(self.value) + next.stringify()
  }
  print(fmt)
}