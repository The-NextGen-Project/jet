        -:    0:Source:C:/Users/Owner/3DOBJE~1/jet/import/nextgen/Support/Panic.h
        -:    0:Graph:C:\Users\Owner\3D Objects\jet\cmake-build-debug-coverage\CMakeFiles\jet.dir\main.cpp.gcno
        -:    0:Data:C:\Users\Owner\3D Objects\jet\cmake-build-debug-coverage\CMakeFiles\jet.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:# ifndef NEXTGEN_PANIC_H
        -:    2:# define NEXTGEN_PANIC_H
        -:    3:# include "Config.h"
        -:    4:
        -:    5:
        -:    6:namespace nextgen {
        -:    7:
        -:    8:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:    9:
        -:   10:  // ANSI Terminal Colors for Linux and MacOS. The colors are strictly
        -:   11:  // pre-defined to be White, Red, Green, Yellow, Blue, and Cyan and nothing
        -:   12:  // more that is needed to highlight something in the terminal.
        -:   13:  struct Colors {
        -:   14:    static constexpr auto WHITE   = COLOR_WHITE;
        -:   15:    static constexpr auto RED     = COLOR_RED;
        -:   16:    static constexpr auto GREEN   = COLOR_GREEN;
        -:   17:    static constexpr auto YELLOW  = COLOR_YELLOW;
        -:   18:    static constexpr auto BLUE    = COLOR_BLUE;
        -:   19:    static constexpr auto CYAN    = COLOR_CYAN;
        -:   20:    static constexpr auto RESET   = COLOR_RESET;
        -:   21:  };
        -:   22:# elif defined(NG_OS_WINDOWS)
        -:   23:
        -:   24:  // NOTE: These colors are number values designated as console "modes" for
        -:   25:  // the Windows Terminal. Windows uses these modes to render text as a
        -:   26:  // specific color.
        -:   27:  enum Colors {
        -:   28:    WHITE  = COLOR_WHITE,
        -:   29:    RED    = COLOR_RED,
        -:   30:    GREEN  = COLOR_GREEN,
        -:   31:    YELLOW = COLOR_YELLOW,
        -:   32:    BLUE   = COLOR_BLUE,
        -:   33:    CYAN   = COLOR_CYAN,
        -:   34:    RESET  = COLOR_RESET
        -:   35:  };
        -:   36:
        -:   37:# endif
        -:   38:
        -:   39:  struct Console {
        -:   40:
        -:   41:# if defined(NG_OS_WINDOWS)
        -:   42:
        -:   43:    // A little guessing trick that has the compiler infer which function gets
        -:   44:    // called. It chooses default template unless we use a color.
       16:   45:    static void Write(Colors color) {
       16:   46:      static HANDLE GenericConsole = GetStdHandle(STD_OUTPUT_HANDLE);
       16:   46-block  0
        1:   46-block  1
        1:   46-block  2
        1:   46-block  3
    $$$$$:   46-block  4
    $$$$$:   46-block  5
       16:   47:      SetConsoleTextAttribute(GenericConsole, color);
       16:   47-block  0
       16:   48:    }
        -:   49:
        -:   50:    // Wrapper around std::cout to mask terminal color settings
        -:   51:    // in the other `Write` function.
        -:   52:    template <typename Arg>
      49*:   53:    static void Write(Arg value) {
      49*:   54:      std::cout << value;
      49*:   55:    }
------------------
_ZN7nextgen7Console5WriteIiEEvT_:
    #####:   53:    static void Write(Arg value) {
    #####:   54:      std::cout << value;
    %%%%%:   54-block  0
    #####:   55:    }
------------------
_ZN7nextgen7Console5WriteIPKcEEvT_:
       47:   53:    static void Write(Arg value) {
       47:   54:      std::cout << value;
       47:   54-block  0
       47:   55:    }
------------------
_ZN7nextgen7Console5WriteIcEEvT_:
        2:   53:    static void Write(Arg value) {
        2:   54:      std::cout << value;
        2:   54-block  0
        2:   55:    }
------------------
        -:   56:
        -:   57:# endif
        -:   58:
        -:   59:    template<typename ... Args>
      39*:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
      39*:   67:      fold {
      39*:   68:        ((Write(args)), 0)...
        -:   69:      };
        -:   70:# endif
      39*:   71:    }
------------------
_ZN7nextgen7Console3LogIJNS_6ColorsEcEEEvDpT_:
    #####:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
    #####:   67:      fold {
    #####:   68:        ((Write(args)), 0)...
    %%%%%:   68-block  0
        -:   69:      };
        -:   70:# endif
    #####:   71:    }
------------------
_ZN7nextgen7Console3LogIJPKcEEEvDpT_:
       37:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
       37:   67:      fold {
       37:   68:        ((Write(args)), 0)...
       37:   68-block  0
        -:   69:      };
        -:   70:# endif
       37:   71:    }
------------------
_ZN7nextgen7Console3LogIJNS_6ColorsEiPKcS4_S2_S4_S2_S4_S2_S4_S4_S2_EEEvDpT_:
    #####:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
    #####:   67:      fold {
    #####:   68:        ((Write(args)), 0)...
    %%%%%:   68-block  0
        -:   69:      };
        -:   70:# endif
    #####:   71:    }
------------------
_ZN7nextgen7Console3LogIJcNS_6ColorsEEEEvDpT_:
    #####:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
    #####:   67:      fold {
    #####:   68:        ((Write(args)), 0)...
    %%%%%:   68-block  0
        -:   69:      };
        -:   70:# endif
    #####:   71:    }
------------------
_ZN7nextgen7Console3LogIJPKcS3_iS3_NS_6ColorsES3_S4_S3_EEEvDpT_:
    #####:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
    #####:   67:      fold {
    #####:   68:        ((Write(args)), 0)...
    %%%%%:   68-block  0
        -:   69:      };
        -:   70:# endif
    #####:   71:    }
------------------
_ZN7nextgen7Console3LogIJcEEEvDpT_:
        2:   60:    static void Log(Args ... args) {
        -:   61:      using fold = int[];
        -:   62:# if defined(NG_OS_LINUX) || defined(NG_OS_APPLE)
        -:   63:      fold {
        -:   64:        (std::cout << args, 0)...
        -:   65:      };
        -:   66:# elif defined(NG_OS_WINDOWS)
        2:   67:      fold {
        2:   68:        ((Write(args)), 0)...
        2:   68-block  0
        -:   69:      };
        -:   70:# endif
        2:   71:    }
------------------
        -:   72:  };
        -:   73:
        -:   74:# define PANIC(msg) nextgen::PanicAt<sizeof(msg), sizeof(__FILE__), sizeof \
        -:   75:("panic("#msg");"), __LINE__, false>(msg, __FILE__, "PANIC("#msg");")
        -:   76:# define ASSERT(cond, msg) if (!(cond)) nextgen::PanicAt<sizeof(msg), sizeof \
        -:   77:(__FILE__), sizeof("ASSERT("#cond", "#msg");"), __LINE__, true>(msg, __FILE__, \
        -:   78:"assert("#cond", "#msg");")
        -:   79:
        -:   80:  // Panic at a specific point in the code. This is simulated as an exception
        -:   81:// throw caught by
        -:   82:// main and returns a failure as to avoid misuse of "std::exit". It prints out the line number,
        -:   83:// and text of the panic message to have the user locate the failed point in the code.
        -:   84:
        -:   85:// Panic at a specific point in the code. This is simulated as an exception
        -:   86:// throw caught by
        -:   87:// main and returns a failure as to avoid misuse of "std::exit". It prints out the line number,
        -:   88:// and text of the panic message to have the user locate the failed point in the code.
        -:   89:  template<
        -:   90:    std::size_t N1, std::size_t N2, std::size_t N3,
        -:   91:    int LINE, bool Assert>
    #####:   92:  static void PanicAt(
        -:   93:    const char (&msg)[N1],  /* Panic Message */
        -:   94:    const char (&FILE)[N2], /* File Name of Error */
        -:   95:    const char (&dup)[N3]) { /* Line text of Panic */
        -:   96:
    #####:   97:    Console::Log(FILE, ":", LINE, " ", Colors::RED, "error: ",
        -:   98:                 Colors::WHITE,
        -:   99:                 msg);
    #####:  100:    Console::Log('\n', Colors::RESET);
        -:  101:
    #####:  102:    auto whitespace = (std::to_string(LINE) + " | ").length();
        -:  103:    if (Assert) {
    #####:  104:      Console::Log(Colors::RED, LINE, " | ", dup, Colors::WHITE,
        -:  105:                   " <-- ",
        -:  106:                   Colors::RED, "Assert Failed:", Colors::YELLOW,
        -:  107:                   " Thread panicked here", "\n", Colors::BLUE);
        -:  108:    } else {
        -:  109:      Console::Log(Colors::RED, LINE, " | ", dup, Colors::YELLOW,
        -:  110:                   " <-- Thread panicked here", "\n",
        -:  111:                   Colors::BLUE);
        -:  112:    }
        -:  113:    /* Leading Whitespace */
    #####:  114:    for (auto i = 0; i < whitespace; ++i) Console::Log(" ");
        -:  115:    /* Highlighting region */
    #####:  116:    for (auto i = 0; i < N3 - 1; ++i) Console::Log('~');
    #####:  117:    Console::Log(Colors::RESET, '\n');
    #####:  118:    throw std::exception();
        -:  119:  }
        -:  120:}
        -:  121:
        -:  122:
        -:  123:# endif //NEXTGEN_PANIC_H
