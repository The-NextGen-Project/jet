        -:    0:Source:C:/Users/Owner/3D Objects/jet/main.cpp
        -:    0:Graph:C:\Users\Owner\3D Objects\jet\cmake-build-debug-coverage\CMakeFiles\jet.dir\main.cpp.gcno
        -:    0:Data:C:\Users\Owner\3D Objects\jet\cmake-build-debug-coverage\CMakeFiles\jet.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <nextgen/jet/Lex/Lexer.h>
        -:    2:#include <nextgen/jet/Diagnostics.h>
        -:    3:typedef int integer_type;
        -:    4:using namespace nextgen;
        -:    5:using namespace nextgen::core;
        -:    6:
        -:    7:
        1:    8:int main(
        -:    9:  [[maybe_unused]] integer_type argc,
        -:   10:  [[maybe_unused]] char **argv,
        -:   11:  [[maybe_unused]] char **envP) {
        -:   12:
        -:   13:
        -:   14:  try {
        -:   15:
        -:   16:    using namespace nextgen;
        -:   17:    using namespace nextgen::core;
        -:   18:
        -:   19:/*
        -:   20:    Console::Log(Colors::RED, "Error "
        -:   21:                              "---------------------------------------------------------- src/test"
        -:   22:                              ".jet\n");
        -:   23:    Console::Log(Colors::RESET, "Reached unexpected end of file when lexing "
        -:   24:                               "token\n\n");
        -:   25:    Console::Log(Colors::WHITE, "50 |\t ", Colors::RED, "var", Colors::YELLOW,
        -:   26:                 " a ",
        -:   27:                 Colors::RESET, "= ",
        -:   28:                 Colors::GREEN, "\"Hello, World!\"\n");
        -:   29:    Console::Log(Colors::WHITE, "51 |\t ", Colors::RED, "var", Colors::YELLOW,
        -:   30:                 " variable ",
        -:   31:                 Colors::RESET, "= ",
        -:   32:                 Colors::BLUE, "0x\n");
        -:   33:    Console::Log("\t\t\t\t\t\t   ", Colors::RED, "~ <-- Token Ended "
        -:   34:                                                 "Unexpectedly\n");
        -:   35:    Console::Log(Colors::BLUE, "   = ", Colors::GREEN, "hint: ",
        -:   36:                 Colors::RESET, "You have an incomplete token written, check "
        -:   37:                                "the docs at ", Colors::YELLOW, "jetlang"
        -:   38:                                                                ".com/docs/tokens",
        -:   39:                                Colors::RESET,
        -:   40:                                " for "
        -:   41:                                "valid tokens.\n");
        -:   42:*/
        -:   43:
        -:   44:
        -:   45:
        2:   46:    Arena<2> arena;
        1:   46-block  0
        1:   46-block  1
    $$$$$:   46-block  2
        -:   47:
        1:   48:    auto buf = "var test = 0xffffffffffffffffffaaaaaaa test";
        1:   49:    auto len = strlen(buf);
        -:   50:    auto lexer = jet::Lexer::New (arena.begin,
        -:   51:                                  buf,
        1:   52:                                  len);
        1:   52-block  0
        1:   53:    lexer.NextToken();
        1:   53-block  0
        1:   54:    lexer.NextToken();
        1:   54-block  0
        1:   55:    lexer.NextToken();
        1:   55-block  0
        1:   56:    auto Error = lexer.NextToken().Error().Unwrap();
        1:   56-block  0
        1:   56-block  1
        1:   56-block  2
    $$$$$:   56-block  3
    $$$$$:   56-block  4
        -:   57:    jet::Diagnostic diagnostic = jet::Diagnostic(arena.begin, buf, len,
        -:   58:                                                 "src/test"
        1:   59:                                                                 ".jet");
        1:   59-block  0
        1:   60:    if (Error.Error == jet::LexErrorType::IntegerOverflow) {
        1:   61:      diagnostic.Build(Error);
        1:   61-block  0
        -:   62:    }
        -:   63:
        -:   64:
    =====:   65:  } catch (std::exception &) {
    $$$$$:   65-block  0
    $$$$$:   65-block  1
    =====:   66:    return EXIT_FAILURE;
        -:   67:  }
        -:   68:
        1:   69:  return EXIT_SUCCESS;
        -:   70:}
