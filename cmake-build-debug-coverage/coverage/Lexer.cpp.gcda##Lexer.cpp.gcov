        -:    0:Source:C:/Users/Owner/3D Objects/jet/lib/Lex/Lexer.cpp
        -:    0:Graph:C:\Users\Owner\3D Objects\jet\cmake-build-debug-coverage\CMakeFiles\jet.dir\lib\Lex\Lexer.cpp.gcno
        -:    0:Data:C:\Users\Owner\3D Objects\jet\cmake-build-debug-coverage\CMakeFiles\jet.dir\lib\Lex\Lexer.cpp.gcda
        -:    0:Runs:1
        -:    1:# include <nextgen/jet/Lex/Lexer.h>
        -:    2:
        -:    3:using namespace nextgen;
        -:    4:using namespace nextgen::jet;
        -:    5:
        -:    6:# define TOKEN(type, text, k, value) Token::New(text, {CurrentLine, CurrentColumn} \
        -:    7:                                                    ,value, k)
        -:    8:
        -:    9:
        -:   10:
        -:   11:
        -:   12:static constexpr TokenKind TokenKindClass[256] {
        -:   13:
        -:   14:  // Error code
        -:   15:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   16:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   17:  TokenKind::Whitespace, // \a
        -:   18:  TokenKind::Whitespace, // \b
        -:   19:  TokenKind::Whitespace, // <space>
        -:   20:  TokenKind::NewLine,    // \n
        -:   21:  TokenKind::Whitespace, // \v
        -:   22:  TokenKind::Error,
        -:   23:  TokenKind::NewLine,    // \r
        -:   24:
        -:   25:  TokenKind::Error, TokenKind::Error,
        -:   26:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   27:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   28:  TokenKind::Error, TokenKind::Error,
        -:   29:
        -:   30:
        -:   31:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   32:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   33:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:   34:
        -:   35:  TokenKind::Whitespace,    // \t
        -:   36:
        -:   37:  TokenKind::Error,
        -:   38:  TokenKind::String,        // '"'
        -:   39:  TokenKind::Error, TokenKind::Error,
        -:   40:  TokenKind::Percent,       // '%'
        -:   41:  TokenKind::AND,           // '&'
        -:   42:  TokenKind::Char,          // '\''
        -:   43:  TokenKind::LParenthesis,  // (
        -:   44:  TokenKind::RParenthesis,  // )
        -:   45:  TokenKind::Star,          // '*'
        -:   46:  TokenKind::Plus,          // '+'
        -:   47:  TokenKind::Error,
        -:   48:
        -:   49:  TokenKind::Minus, // '-'
        -:   50:
        -:   51:
        -:   52:  TokenKind::Dot, // '.'
        -:   53:
        -:   54:  TokenKind::Slash, // '/'
        -:   55:
        -:   56:
        -:   57:  // Digits
        -:   58:  TokenKind::Integer, TokenKind::Integer, TokenKind::Integer,
        -:   59:  TokenKind::Integer, TokenKind::Integer,
        -:   60:  TokenKind::Integer, TokenKind::Integer, TokenKind::Integer,
        -:   61:  TokenKind::Integer, TokenKind::Integer,
        -:   62:
        -:   63:
        -:   64:  TokenKind::Colon, // ':'
        -:   65:
        -:   66:  // Error Code
        -:   67:  TokenKind::Error,
        -:   68:  TokenKind::LessThan, // '<'
        -:   69:  TokenKind::Equals, // '='
        -:   70:  TokenKind::GreaterThan, // '>'
        -:   71:  TokenKind::QuestionMark, // '?'
        -:   72:  TokenKind::Error,
        -:   73:
        -:   74:  // Uppercase letters
        -:   75:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   76:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   77:  TokenKind::Identifier,
        -:   78:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   79:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   80:  TokenKind::Identifier,
        -:   81:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   82:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   83:  TokenKind::Identifier,
        -:   84:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:   85:  TokenKind::Identifier, TokenKind::Identifier,
        -:   86:
        -:   87:
        -:   88:  TokenKind::LBracket,  // '['
        -:   89:
        -:   90:  TokenKind::StringEscapeStart, // \\
        -:   91:
        -:   92:  TokenKind::RBracket,  // ']'
        -:   93:
        -:   94:  TokenKind::XOR,       // '^'
        -:   95:
        -:   96:  TokenKind::Identifier,// '_'
        -:   97:
        -:   98:  TokenKind::Error,
        -:   99:
        -:  100:  // Lowercase letters
        -:  101:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  102:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  103:  TokenKind::Identifier,
        -:  104:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  105:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  106:  TokenKind::Identifier,
        -:  107:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  108:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  109:  TokenKind::Identifier,
        -:  110:  TokenKind::Identifier, TokenKind::Identifier, TokenKind::Identifier,
        -:  111:  TokenKind::Identifier, TokenKind::Identifier,
        -:  112:
        -:  113:
        -:  114:  TokenKind::LCurlyBrace, // '{'
        -:  115:  TokenKind::Pipe, // '|'
        -:  116:  TokenKind::RCurlyBrace, // '}'
        -:  117:  TokenKind::NOT, // '~'
        -:  118:
        -:  119:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  120:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  121:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  122:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  123:  TokenKind::Error, TokenKind::Error,
        -:  124:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  125:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  126:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  127:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  128:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  129:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  130:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  131:  TokenKind::Error, TokenKind::Error,
        -:  132:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  133:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  134:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  135:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  136:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  137:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  138:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  139:  TokenKind::Error, TokenKind::Error,
        -:  140:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  141:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  142:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  143:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  144:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  145:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  146:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  147:  TokenKind::Error, TokenKind::Error,
        -:  148:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  149:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  150:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  151:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  152:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  153:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  154:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  155:  TokenKind::Error, TokenKind::Error,
        -:  156:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  157:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  158:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  159:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  160:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  161:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  162:  TokenKind::Error, TokenKind::Error, TokenKind::Error,
        -:  163:  TokenKind::Error, TokenKind::Error,
        -:  164:};
        -:  165:
        -:  166:constexpr static int IntegerBits[256] = {
        -:  167:
        -:  168:  // Error code
        -:  169:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  170:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  171:  -3,-3,
        -:  172:
        -:  173:  // Digits
        -:  174:  0,1,2,3,4,5,6,7,8,9,
        -:  175:
        -:  176:  // Error Code
        -:  177:  -3,-3,-3,-3,-3,-3,-3,
        -:  178:
        -:  179:  // Uppercase values
        -:  180:  10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
        -:  181:
        -:  182:  // Error code
        -:  183:  -3,-3,-3,-3,-3,-3,
        -:  184:
        -:  185:  // Lowercase values
        -:  186:  10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30, 31,32,33,34,35,
        -:  187:
        -:  188:  // Error code
        -:  189:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  190:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  191:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  192:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  193:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  194:  -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
        -:  195:};
        -:  196:
        -:  197:
        -:  198:struct JetKeyword {
        -:  199:  str    key;
        -:  200:  TokenKind id;
        -:  201:};
        -:  202:
        -:  203:static const struct JetKeyword Keywords[] {
        -:  204:  { "if"_intern, KeywordIf },
        -:  205:  { "else"_intern, KeywordElse },
        -:  206:  { "elif"_intern, KeywordElif },
        -:  207:  { "while"_intern, KeywordWhile },
        -:  208:  { "for"_intern, KeywordFor },
        -:  209:  { "true"_intern, KeywordTrue },
        -:  210:  { "false"_intern, KeywordFalse },
        -:  211:  { "None"_intern, KeywordNone },
        -:  212:  { "fn"_intern, KeywordFunction },
        -:  213:  { "struct"_intern, KeywordStruct },
        -:  214:  { "export"_intern, KeywordExport },
        -:  215:  { "enum"_intern, KeywordEnum },
        -:  216:  { "extern"_intern, KeywordExtern },
        -:  217:  { "error"_intern, KeywordError },
        -:  218:  { "var"_intern, KeywordVar },
        -:  219:  { "return"_intern, KeywordReturn },
        -:  220:  { "and"_intern, KeywordAnd },
        -:  221:  { "or"_intern, KeywordOr },
        -:  222:  { "break"_intern, KeywordBreak },
        -:  223:  { "continue"_intern, KeywordContinue },
        -:  224:  { "defer"_intern, KeywordDefer },
        -:  225:  { "union"_intern, KeywordUnion },
        -:  226:};
        -:  227:
        -:  228:/// Determine the validity of parsed string being a Keyword. The assumption
        -:  229:/// made in this function is that `value` is an interned string therefore only
        -:  230:/// direct pointer comparison is made resulting in O(1) comparison.
        5:  231:static auto ReturnValidKeyword(str &value, TokenKind else_) -> TokenKind {
       99:  232:  for (auto i = 0; i < SizeOfArray(Keywords); ++i) {
        5:  232-block  0
       99:  232-block  1
       94:  232-block  2
       96:  233:    if (value == Keywords[i].key)
       96:  233-block  0
        2:  234:      return Keywords[i].id;
        2:  234-block  0
        -:  235:  }
        3:  236:  return else_;
        3:  236-block  0
        -:  237:}
        -:  238:
        -:  239:
        -:  240:
        -:  241:
        4:  242:auto Lexer::NextToken() -> Result<Token, LexError> {
        4:  242-block  0
        4:  243:  TokenKind Kind = TokenKindClass[Curr()];
        4:  244:  Token Instance = Token {};
        4:  244-block  0
        -:  245:
        4:  246:  goto start;
        7:  247:  start:
        -:  248:  {
        7:  249:    switch (Kind) {
        7:  249-block  0
        -:  250:
        -:  251:      ///
        -:  252:      /// Integers
        -:  253:      ///
        -:  254:      /// Pattern: Key Lexing Statutes
        -:  255:      ///   • '_' is valid anywhere in the integer as long as it's not the
        -:  256:      ///     first character. Examples:
        -:  257:      ///       • 123_232_2423
        -:  258:      ///       • 234__343
        -:  259:      ///       • 3__23_3_23_2_2
        -:  260:      ///   • Identifiers are not interned for integers. This is because they
        -:  261:      ///     do not provide any reasonable performance gain.
        -:  262:      ///   • All number values with suffixes of: 'e' or 'p' are floating
        -:  263:      ///     point values unless casted (handled in Parser/AST).
        -:  264:      ///
        -:  265:      /// Valid Patterns:
        -:  266:      ///   • 0x123 (Hexadecimal)
        -:  267:      ///   • 12345 (Base 10)
        -:  268:      ///   • 0b011 (Base 2)
        -:  269:      ///   • 0#abc (Base 36)
        -:  270:      ///
        -:  271:      ///
        1:  272:      case Integer: {
        -:  273:
        -:  274:        // Integer Base
        1:  275:        int Radix = 10;
        -:  276:
        -:  277:        // FNV-1a Hash Value
        1:  278:        auto Hash  = FNV_OFF;
        -:  279:
        -:  280:        // Classification for Unsigned Values
        1:  281:        TokenClassification Flags = static_cast<TokenClassification>(0);
        -:  282:
        -:  283:        // Start of token
        1:  284:        auto Begin = Buffer;
        1:  285:        auto BeginCol = CurrentColumn;
        1:  285-block  0
        1:  286:        switch (Curr()) {
        1:  286-block  0
        1:  287:          case '0':
        1:  288:            switch (Next(1)) {
        1:  288-block  0
    #####:  289:              case 'b':
    #####:  290:                Radix = 2;
    #####:  291:                Next(1);
    %%%%%:  291-block  0
    #####:  292:                break;
        1:  293:              case 'x':
        1:  294:                Radix = 16;
        1:  295:                Next(1);
        1:  295-block  0
        1:  296:                break;
    #####:  297:              case '#':
    #####:  298:                Radix = 36;
    #####:  299:                Next(1);
    %%%%%:  299-block  0
    #####:  300:                break;
    #####:  301:              case '0': case '1': case '2': case '3': case '4': case '5':
        -:  302:              case '6': case '7': case '8': case '9':
    #####:  303:                Radix = 8;
    #####:  304:                break;
    %%%%%:  304-block  0
    #####:  305:              default: // TODO: Figure what needs to be done here
    #####:  306:                break;
    %%%%%:  306-block  0
        -:  307:            }
        1:  308:            break;
        1:  308-block  0
    #####:  309:          default:
    #####:  310:            break;
    %%%%%:  310-block  0
        -:  311:        }
        -:  312:
        -:  313:
        1:  314:        decltype(UINTPTR_MAX) IntegerValue = 0;
        1:  314-block  0
       16:  315:        do {
       16:  315-block  0
        -:  316:
       17:  317:          auto Current = Curr();
        -:  318:
        -:  319:          // Calculate Identifier FNV-1a Hash
       17:  320:          Hash ^= Current;
       17:  321:          Hash *= FNV_PRIME;
        -:  322:
       17:  323:          int digit = IntegerBits[Current];
        -:  324:
       17:  325:          if (digit < 0) {
       17:  325-block  0
    #####:  326:            break;
    %%%%%:  326-block  0
        -:  327:          }
        -:  328:
       17:  329:          if (digit >= Radix) {
       17:  329-block  0
        -:  330:            return Err<Token, LexError>( LexError {
        -:  331:              LexErrorType::DigitOutOfRange,
    #####:  332:              { CurrentLine, CurrentColumn },
    #####:  333:              Token::New(str(Range<const char *>(Begin, Buffer)),
    $$$$$:  333-block  0
    #####:  334:                         {CurrentLine, BeginCol}, TokenKind::Integer)
    %%%%%:  334-block  0
    %%%%%:  334-block  1
    $$$$$:  334-block  2
    #####:  335:            });
    %%%%%:  335-block  0
    %%%%%:  335-block  1
        -:  336:          }
       17:  337:          if (IntegerValue > (UINTPTR_MAX - digit) / Radix) {
       17:  337-block  0
        -:  338:            return Err<Token, LexError>( LexError {
        -:  339:              LexErrorType::IntegerOverflow,
        1:  340:              { CurrentLine, CurrentColumn },
        1:  341:              Token::New(str(Range<const char *>(Begin, Buffer)),
    $$$$$:  341-block  0
        2:  342:                         {CurrentLine, BeginCol}, TokenKind::Integer)
        1:  342-block  0
        1:  342-block  1
    $$$$$:  342-block  2
        2:  343:            });
        1:  343-block  0
        1:  343-block  1
        -:  344:          }
       16:  345:          IntegerValue = IntegerValue * Radix + digit;
       16:  346:        } while (Next(1));
       16:  346-block  0
        -:  347:
        -:  348:        // Token Suffix
    #####:  349:        switch (Curr()) { // TODO: Add Implementation
    %%%%%:  349-block  0
    #####:  350:          case 'p': // Power
    #####:  351:            break;
    %%%%%:  351-block  0
    #####:  352:          case 'u': // Unsigned
    #####:  353:            Flags = TokenClassification::Unsigned;
    #####:  354:            break;
    %%%%%:  354-block  0
    #####:  355:          case 'e': // x10^power
    #####:  356:            break;
    %%%%%:  356-block  0
        -:  357:        }
        -:  358:
        -:  359:        // End of Token
    #####:  360:        auto End = Buffer;
        -:  361:
        -:  362:
        -:  363:        // Important Note: When integer values are lexed, they do not hold
        -:  364:        // a direct value stored in a buffer, rather just a pseudo range value
        -:  365:        // with no allocation is substituted because integer value strings do
        -:  366:        // need to be interned.
    #####:  367:        auto ID = str(Range<const char *>(Begin, End));
    %%%%%:  367-block  0
    $$$$$:  367-block  1
        -:  368:
    #####:  369:        Instance = TOKEN(decltype(UINTPTR_MAX), ID, TokenKind::Integer,
    %%%%%:  369-block  0
    %%%%%:  369-block  1
        -:  370:                         IntegerValue);
        -:  371:        Instance.setFlag(Flags);
    #####:  372:        return Ok<Token, LexError>(Instance);
    %%%%%:  372-block  0
        -:  373:      }
    #####:  374:      case String:
    #####:  375:        break;
    %%%%%:  375-block  0
    #####:  376:      case Decimal:
    #####:  377:        break;
    %%%%%:  377-block  0
        2:  378:      case Identifier: { // Identifier are no more than 256 characters
        -:  379:
        -:  380:
        2:  381:        auto Begin = this->Buffer;
        -:  382:
        -:  383:
        -:  384:        // FNV-1a Hash on String as Lexing as to not do it twice
        -:  385:        // https://en.wikipedia.org/wiki/Fowler–Noll–Vo_function
        2:  386:        auto val = FNV_OFF;
        2:  386-block  0
        -:  387:        char Current;
        5:  388:        do {
        5:  388-block  0
        7:  389:          Current = Curr();
        -:  390:
        7:  391:          val ^= Current;
        7:  392:          val *= FNV_PRIME;
        -:  393:
        -:  394:
        7:  395:        } while (TokenKindClass[Next(1)] == TokenKind::Identifier);
        7:  395-block  0
        -:  396:
        -:  397:
        2:  398:        auto End = this->Buffer;
        -:  399:
        2:  400:        auto S = str(Begin, End-Begin);
        2:  400-block  0
        2:  401:        S.setHash(val);
        2:  402:        auto Intern = StringInterner::InsertOrGet(S);
        -:  403:
        -:  404:        // Ensure appropriate kind is assigned
        2:  405:        auto Type = ReturnValidKeyword(Intern,TokenKind::Identifier);
        2:  405-block  0
        -:  406:
        2:  407:        Instance = TOKEN(const char *, Intern, Type, "");
        2:  407-block  0
        2:  408:        if (Type != TokenKind::Identifier)
        2:  408-block  0
        -:  409:          Instance.setFlag(TokenClassification::Keyword);
        -:  410:
        2:  411:        return Ok<Token, LexError>(Instance);
        2:  411-block  0
        -:  412:      }
    #####:  413:      case LessThan: {
    #####:  414:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  414-block  0
    #####:  415:        match (Kind, s1) {
    #####:  416:          group(TokenKind::LessThan, TokenKind::Equals):
    #####:  417:            Instance = TOKEN(const char *, "<=", TokenKind::LessThan, "<=");
    %%%%%:  417-block  0
    $$$$$:  417-block  1
    #####:  418:            Instance.assignment = true;
    #####:  419:            break;
    %%%%%:  419-block  0
    #####:  420:          group(TokenKind::LessThan, TokenKind::LessThan):
    #####:  421:            Kind = TokenKind::LeftShift;
    #####:  422:            goto start;
    %%%%%:  422-block  0
    #####:  423:          default:
    #####:  424:            Instance = TOKEN(char, '<', TokenKind::LessThan, '<');
    %%%%%:  424-block  0
    $$$$$:  424-block  1
    #####:  425:            break;
    %%%%%:  425-block  0
        -:  426:        }
    #####:  427:        break;
    %%%%%:  427-block  0
        -:  428:      }
    #####:  429:      case LeftShift: {
    #####:  430:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  430-block  0
    #####:  431:        match (Kind, s1) {
    #####:  432:          group(TokenKind::LeftShift, TokenKind::Equals):
    #####:  433:            Instance.assignment = true;
    #####:  434:            Instance = TOKEN(const char *, "<<=", TokenKind::LeftShift, "<<=");
    %%%%%:  434-block  0
    %%%%%:  434-block  1
    $$$$$:  434-block  2
    #####:  435:          default:
    #####:  436:            Instance = TOKEN(const char *, "<<", TokenKind::LeftShift, "<<");
    %%%%%:  436-block  0
    $$$$$:  436-block  1
    #####:  437:            break;
    %%%%%:  437-block  0
        -:  438:        }
    #####:  439:        break;
    %%%%%:  439-block  0
        -:  440:      }
    #####:  441:      case RightShift: {
    #####:  442:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  442-block  0
    #####:  443:        match (Kind, s1) {
    #####:  444:          group(TokenKind::RightShift, TokenKind::Equals):
    #####:  445:            Instance.assignment = true;
    #####:  446:            Instance = TOKEN(const char *, ">>=", TokenKind::RightShift, ">>=");
    %%%%%:  446-block  0
    %%%%%:  446-block  1
    $$$$$:  446-block  2
    #####:  447:          default:
    #####:  448:            Instance = TOKEN(const char *, ">>", TokenKind::RightShift, ">>");
    %%%%%:  448-block  0
    $$$$$:  448-block  1
    #####:  449:            break;
    %%%%%:  449-block  0
        -:  450:        }
    #####:  451:        break;
    %%%%%:  451-block  0
        -:  452:      }
    #####:  453:      case GreaterThan: {
    #####:  454:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  454-block  0
    #####:  455:        match (Kind, s1) {
    #####:  456:          group(TokenKind::GreaterThan, TokenKind::Equals):
    #####:  457:            Instance = TOKEN(const char *, ">=", TokenKind::GreaterThan, ">=");
    %%%%%:  457-block  0
    $$$$$:  457-block  1
    #####:  458:            Instance.assignment = true;
    #####:  459:            break;
    %%%%%:  459-block  0
    #####:  460:          group(TokenKind::GreaterThan, TokenKind::GreaterThan):
    #####:  461:            Kind = TokenKind::LeftShift;
    #####:  462:            goto start;
    %%%%%:  462-block  0
    #####:  463:          default:
    #####:  464:            Instance = TOKEN(char, '>', TokenKind::GreaterThan, '>');
    %%%%%:  464-block  0
    $$$$$:  464-block  1
    #####:  465:            break;
    %%%%%:  465-block  0
        -:  466:        }
    #####:  467:        break;
    %%%%%:  467-block  0
        -:  468:      }
        1:  469:      case Equals: {
        1:  470:        auto s1 = TokenKindClass[Peek(1)];
        1:  470-block  0
        1:  471:        if (s1 == TokenKind::Equals) {
    #####:  472:          Instance = TOKEN(const char *, "==", TokenKind::EqualsEquals, "==");
    %%%%%:  472-block  0
    %%%%%:  472-block  1
    $$$$$:  472-block  2
        -:  473:        } else {
        1:  474:          Instance = TOKEN(char, '=', TokenKind::Equals, '=');
        1:  474-block  0
        1:  474-block  1
    $$$$$:  474-block  2
        -:  475:        }
        1:  476:        break;
        1:  476-block  0
        -:  477:      }
    #####:  478:      case QuestionMark: {
    #####:  479:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  479-block  0
    #####:  480:        if (s1 == TokenKind::QuestionMark) {
    #####:  481:          Instance = TOKEN(const char *, "??", TokenKind::Then, "??");
    %%%%%:  481-block  0
    %%%%%:  481-block  1
    $$$$$:  481-block  2
        -:  482:        } else {
    #####:  483:          Instance = TOKEN(char, '?', TokenKind::QuestionMark, '?');
    %%%%%:  483-block  0
    %%%%%:  483-block  1
    $$$$$:  483-block  2
        -:  484:        }
    #####:  485:        break;
    %%%%%:  485-block  0
        -:  486:      }
    #####:  487:      case Plus: {
    #####:  488:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  488-block  0
    #####:  489:        match (Kind, s1) {
    #####:  490:          group(TokenKind::Plus, TokenKind::PlusPlus):
    #####:  491:            Instance = TOKEN(const char *, "++", TokenKind::PlusPlus, "++");
    %%%%%:  491-block  0
    $$$$$:  491-block  1
    #####:  492:            break;
    %%%%%:  492-block  0
    #####:  493:          group(TokenKind::Plus, TokenKind::Equals):
    #####:  494:            Instance = TOKEN(const char *, "+=", TokenKind::Plus, "+=");
    %%%%%:  494-block  0
    $$$$$:  494-block  1
    #####:  495:            Instance.assignment = true;
    %%%%%:  495-block  0
    #####:  496:          default:
    #####:  497:            Instance = TOKEN(char, '+', TokenKind::Plus, '+');
    %%%%%:  497-block  0
    $$$$$:  497-block  1
    #####:  498:            break;
    %%%%%:  498-block  0
        -:  499:        }
    #####:  500:        break;
    %%%%%:  500-block  0
        -:  501:      }
    #####:  502:      case Minus: {
    #####:  503:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  503-block  0
    #####:  504:        match (Kind, s1) {
    #####:  505:          group(TokenKind::Minus, TokenKind::Minus):
    #####:  506:            Instance = TOKEN(const char *, "--", TokenKind::MinusMinus, "--");
    %%%%%:  506-block  0
    $$$$$:  506-block  1
    #####:  507:            break;
    %%%%%:  507-block  0
    #####:  508:          group(TokenKind::Minus, TokenKind::Equals):
    #####:  509:            Instance = TOKEN(const char *, "-=", TokenKind::MinusMinus, "-=");
    %%%%%:  509-block  0
    $$$$$:  509-block  1
    #####:  510:            Instance.assignment = true;
    %%%%%:  510-block  0
    #####:  511:          default:
    #####:  512:            Instance = TOKEN(char, '-', TokenKind::Minus, '-');
    %%%%%:  512-block  0
    $$$$$:  512-block  1
    #####:  513:            break;
    %%%%%:  513-block  0
        -:  514:        }
    #####:  515:        break;
    %%%%%:  515-block  0
        -:  516:      }
    #####:  517:      case Slash:
    #####:  518:        break;
    %%%%%:  518-block  0
    #####:  519:      case Star:
    #####:  520:        break;
    %%%%%:  520-block  0
    #####:  521:      case NewLine: // \n or \r
    #####:  522:        SkipNewLine();
    %%%%%:  522-block  0
    #####:  523:        goto start; // Does this so 2 function calls aren't wasted.
    %%%%%:  523-block  0
    #####:  524:      case Char:
    %%%%%:  524-block  0
    #####:  525:        Instance = TOKEN(char, Next(1), TokenKind::Char, Curr());
    %%%%%:  525-block  0
    $$$$$:  525-block  1
    #####:  526:        if (TokenKindClass[Next(1)] != TokenKind::Char) {
    %%%%%:  526-block  0
        -:  527:          return Err<Token, LexError>(LexError{
        -:  528:            LexErrorType::MissingClosingForChar,
    #####:  529:            {CurrentLine, CurrentColumn} // 'x[?] <-- Missing Closing!
    #####:  530:          });
    %%%%%:  530-block  0
        -:  531:        }
    #####:  532:        break;
    %%%%%:  532-block  0
        3:  533:      case Whitespace: // Skip whitespace
        3:  534:        Next(1);
        3:  534-block  0
        3:  535:        Kind = TokenKindClass[Curr()];
        3:  536:        goto start;
        3:  536-block  0
    #####:  537:      case Dot: {
    #####:  538:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  538-block  0
    #####:  539:        auto s2 = TokenKindClass[Peek(2)];
    #####:  540:        auto s3 = TokenKindClass[Peek(3)];
        -:  541:
    #####:  542:        match (Kind, s1) {
    #####:  543:          group(TokenKind::Dot, TokenKind::Dot):
    #####:  544:            Instance = s2 == TokenKind::Dot ?
    %%%%%:  544-block  0
    #####:  545:                       (TOKEN(const char *, "...",
    %%%%%:  545-block  0
    $$$$$:  545-block  1
        -:  546:                           TokenKind::Ellipsis, "...")) :
    #####:  547:                       (TOKEN(const char *, "..",
    %%%%%:  547-block  0
    $$$$$:  547-block  1
        -:  548:                           TokenKind::RangeSpan, ".."));
    #####:  549:            break;
    %%%%%:  549-block  0
    #####:  550:          default:
    #####:  551:            Instance = TOKEN(char, '.', TokenKind::Dot, '.');
    %%%%%:  551-block  0
    $$$$$:  551-block  1
    #####:  552:            break;
    %%%%%:  552-block  0
        -:  553:        }
        -:  554:        // Cannot match token "...[.]" <-- Invalid Dot Here!
    #####:  555:        if (s3 == TokenKind::Dot && Instance.getKind() == TokenKind::Ellipsis) {
    %%%%%:  555-block  0
    %%%%%:  555-block  1
    %%%%%:  555-block  2
    %%%%%:  555-block  3
    %%%%%:  555-block  4
        -:  556:          return Err<Token, LexError>(LexError{
        -:  557:            LexErrorType::InvalidDot,
    #####:  558:            {CurrentLine, CurrentColumn + 1}
    #####:  559:          });
    %%%%%:  559-block  0
        -:  560:        }
        -:  561:
    #####:  562:        break;
    %%%%%:  562-block  0
        -:  563:      }
        -:  564:        // Cannot be generated by the TokenKind table, assigned after checks
    #####:  565:      case EqualsEquals:
        -:  566:      case Pow:
        -:  567:      case Boolean:
    #####:  568:        UNREACHABLE;
    %%%%%:  568-block  0
    #####:  569:        break;
    %%%%%:  569-block  0
    #####:  570:      case Error:
        -:  571:        return Err<Token, LexError>(LexError{
        -:  572:          LexErrorType::InvalidChar,
    #####:  573:          {CurrentLine, CurrentColumn}
    #####:  574:        });
    %%%%%:  574-block  0
    #####:  575:      default:
    %%%%%:  575-block  0
    #####:  576:        Instance = TOKEN(char, Curr(), Kind, Curr());
    %%%%%:  576-block  0
    %%%%%:  576-block  1
    $$$$$:  576-block  2
    #####:  577:        break;
    %%%%%:  577-block  0
        -:  578:    }
        -:  579:  }
        1:  580:  Next(Instance.Length());
        1:  580-block  0
        1:  581:  return Ok<Token, LexError>(Instance);
        -:  582:}
        -:  583:
        4:  584:void Lexer::PrintNextToken() {
        4:  584-block  0
        4:  585:  TokenKind Kind = TokenKindClass[Curr()];
        4:  586:  Token Instance = Token {};
        4:  586-block  0
        -:  587:
        4:  588:  goto start;
        6:  589:  start:
        -:  590:  {
        6:  591:    switch (Kind) {
        6:  591-block  0
        -:  592:
        1:  593:      case Integer: {
        -:  594:
        -:  595:        // Start of token
        1:  596:        auto Begin = Buffer;
        1:  596-block  0
        -:  597:
        1:  598:        switch (Curr()) {
        1:  598-block  0
        1:  599:          case '0':
        1:  600:            switch (Next(1)) {
        1:  600-block  0
    #####:  601:              case 'b':
    #####:  602:                Next(1);
    %%%%%:  602-block  0
    #####:  603:                break;
        1:  604:              case 'x':
        1:  605:                Next(1);
        1:  605-block  0
        1:  606:                break;
    #####:  607:              case '#':
    #####:  608:                Next(1);
    %%%%%:  608-block  0
    #####:  609:                break;
    #####:  610:              case '0': case '1': case '2': case '3': case '4': case '5':
        -:  611:              case '6': case '7': case '8': case '9':
    #####:  612:                break;
    %%%%%:  612-block  0
    #####:  613:              default:
    #####:  614:                break;
    %%%%%:  614-block  0
        -:  615:            }
        1:  616:            break;
        1:  616-block  0
    #####:  617:          default:
    #####:  618:            break;
    %%%%%:  618-block  0
        -:  619:        }
        -:  620:
       25:  621:        do {
       25:  621-block  0
        -:  622:
       26:  623:          auto Current = Curr();
       26:  624:          int digit = IntegerBits[Current];
        -:  625:
       26:  626:          if (digit < 0) {
       26:  626-block  0
        1:  627:            break;
        1:  627-block  0
        -:  628:          }
        -:  629:
       25:  630:        } while (Next(1));
       25:  630-block  0
        -:  631:
        -:  632:        // Token Suffix
        1:  633:        switch (Curr()) { // TODO: Add Implementation
        1:  633-block  0
    #####:  634:          case 'p': // Power
    #####:  635:            break;
    %%%%%:  635-block  0
    #####:  636:          case 'u': // Unsigned
    #####:  637:            break;
    %%%%%:  637-block  0
    #####:  638:          case 'e': // x10^power
    #####:  639:            break;
    %%%%%:  639-block  0
        -:  640:        }
        -:  641:
        1:  642:        auto End = Buffer;
        -:  643:
        2:  644:        std::string Print = std::string(Begin, End);
        1:  644-block  0
        1:  644-block  1
    $$$$$:  644-block  2
        1:  645:        Console::Log(Colors::BLUE, Print, Colors::RESET);
        1:  645-block  0
        1:  645-block  1
    $$$$$:  645-block  2
    $$$$$:  645-block  3
        -:  646:
        1:  647:        break;
        -:  648:      }
    #####:  649:      case String:
    #####:  650:        break;
    %%%%%:  650-block  0
    #####:  651:      case Decimal:
    #####:  652:        break;
    %%%%%:  652-block  0
        3:  653:      case Identifier: { // Maybe : Identifier length no more 256 characters?
        -:  654:
        -:  655:
        3:  656:        auto Begin = this->Buffer;
        -:  657:
        -:  658:        // FNV-1a Hash on String as Lexing as to not do it twice
        -:  659:        // https://en.wikipedia.org/wiki/Fowler–Noll–Vo_function
        3:  660:        auto val = FNV_OFF;
        3:  660-block  0
        6:  661:        do {
        6:  661-block  0
        -:  662:
        9:  663:          val ^= Curr();
        9:  664:          val *= FNV_PRIME;
        9:  665:        } while (TokenKindClass[Next(1)] == TokenKind::Identifier);
        9:  665-block  0
        -:  666:
        -:  667:
        3:  668:        auto End = this->Buffer;
        -:  669:
        3:  670:        auto S = str(Begin, End-Begin);
        3:  670-block  0
        3:  671:        S.setHash(val);
        3:  672:        auto Intern = StringInterner::InsertOrGet(S);
        -:  673:
        -:  674:        // Ensure appropriate kind is assigned
        3:  675:        auto Type = ReturnValidKeyword(Intern,TokenKind::Identifier);
        3:  675-block  0
        -:  676:
        3:  677:        Instance = TOKEN(const char *, Intern, Type, "");
        3:  677-block  0
        3:  678:        if (Type != TokenKind::Identifier) {
        3:  678-block  0
        1:  679:          Console::Log(Colors::RED, Intern, Colors::RESET);
        1:  679-block  0
        -:  680:        } else {
        2:  681:          Console::Log(Colors::YELLOW, Intern, Colors::RESET);
        2:  681-block  0
        -:  682:        }
        3:  683:        break;
        3:  683-block  0
        -:  684:      }
    #####:  685:      case LessThan: {
    #####:  686:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  686-block  0
    #####:  687:        match (Kind, s1) {
    #####:  688:          group(TokenKind::LessThan, TokenKind::Equals):
    #####:  689:            Console::Log("<=");
    %%%%%:  689-block  0
    #####:  690:            break;
    %%%%%:  690-block  0
    #####:  691:          group(TokenKind::LessThan, TokenKind::LessThan):
    #####:  692:            Kind = TokenKind::LeftShift;
    #####:  693:            goto start;
    %%%%%:  693-block  0
    #####:  694:          default:
    #####:  695:            Console::Log("<");
    %%%%%:  695-block  0
    #####:  696:            break;
    %%%%%:  696-block  0
        -:  697:        }
    #####:  698:        break;
    %%%%%:  698-block  0
        -:  699:      }
    #####:  700:      case LeftShift: {
    #####:  701:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  701-block  0
    #####:  702:        match (Kind, s1) {
    #####:  703:          group(TokenKind::LeftShift, TokenKind::Equals):
    #####:  704:            Console::Log("<<=");
    %%%%%:  704-block  0
    #####:  705:          default:
    #####:  706:            Console::Log("<<");
    %%%%%:  706-block  0
    #####:  707:            break;
    %%%%%:  707-block  0
        -:  708:        }
    #####:  709:        break;
    %%%%%:  709-block  0
        -:  710:      }
    #####:  711:      case RightShift: {
    #####:  712:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  712-block  0
    #####:  713:        match (Kind, s1) {
    #####:  714:          group(TokenKind::RightShift, TokenKind::Equals):
    #####:  715:            Console::Log(">>=");
    %%%%%:  715-block  0
    #####:  716:          default:
    #####:  717:            Console::Log(">>");
    %%%%%:  717-block  0
    #####:  718:            break;
    %%%%%:  718-block  0
        -:  719:        }
    #####:  720:        break;
    %%%%%:  720-block  0
        -:  721:      }
    #####:  722:      case GreaterThan: {
    #####:  723:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  723-block  0
    #####:  724:        match (Kind, s1) {
    #####:  725:          group(TokenKind::GreaterThan, TokenKind::Equals):
    #####:  726:            Console::Log(">=");
    %%%%%:  726-block  0
    #####:  727:            break;
    %%%%%:  727-block  0
    #####:  728:          group(TokenKind::GreaterThan, TokenKind::GreaterThan):
    #####:  729:            Kind = TokenKind::LeftShift;
    #####:  730:            goto start;
    %%%%%:  730-block  0
    #####:  731:          default:
    #####:  732:            Console::Log(">");
    %%%%%:  732-block  0
    #####:  733:            break;
    %%%%%:  733-block  0
        -:  734:        }
    #####:  735:        break;
    %%%%%:  735-block  0
        -:  736:      }
    #####:  737:      case Equals: {
    #####:  738:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  738-block  0
    #####:  739:        if (s1 == TokenKind::Equals) {
    #####:  740:          Console::Log("==");
    %%%%%:  740-block  0
        -:  741:        } else {
    #####:  742:          Console::Log("=");
    %%%%%:  742-block  0
        -:  743:        }
    #####:  744:        Next(1);
    %%%%%:  744-block  0
    #####:  745:        break;
        -:  746:      }
    #####:  747:      case QuestionMark: {
    #####:  748:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  748-block  0
    #####:  749:        if (s1 == TokenKind::QuestionMark) {
    #####:  750:          Console::Log("??");
    %%%%%:  750-block  0
        -:  751:        } else {
    #####:  752:          Console::Log("?");
    %%%%%:  752-block  0
        -:  753:        }
    #####:  754:        break;
    %%%%%:  754-block  0
        -:  755:      }
    #####:  756:      case Plus: {
    #####:  757:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  757-block  0
    #####:  758:        match (Kind, s1) {
    #####:  759:          group(TokenKind::Plus, TokenKind::PlusPlus):
    #####:  760:            Console::Log("++");
    %%%%%:  760-block  0
    #####:  761:            break;
    %%%%%:  761-block  0
    #####:  762:          group(TokenKind::Plus, TokenKind::Equals):
    #####:  763:            Console::Log("+=");
    %%%%%:  763-block  0
    #####:  764:          default:
    #####:  765:            Console::Log("+");
    %%%%%:  765-block  0
    #####:  766:            break;
    %%%%%:  766-block  0
        -:  767:        }
    #####:  768:        break;
    %%%%%:  768-block  0
        -:  769:      }
    #####:  770:      case Minus: {
    #####:  771:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  771-block  0
    #####:  772:        match (Kind, s1) {
    #####:  773:          group(TokenKind::Minus, TokenKind::Minus):
    #####:  774:            Console::Log("--");
    %%%%%:  774-block  0
    #####:  775:            break;
    %%%%%:  775-block  0
    #####:  776:          group(TokenKind::Minus, TokenKind::Equals):
    #####:  777:            Console::Log("-=");
    %%%%%:  777-block  0
    #####:  778:            break;
    %%%%%:  778-block  0
    #####:  779:          default:
    #####:  780:            Console::Log("-");
    %%%%%:  780-block  0
    #####:  781:            break;
    %%%%%:  781-block  0
        -:  782:        }
    #####:  783:        break;
    %%%%%:  783-block  0
        -:  784:      }
    #####:  785:      case Slash:
    #####:  786:        break;
    %%%%%:  786-block  0
    #####:  787:      case Star:
    #####:  788:        break;
    %%%%%:  788-block  0
    #####:  789:      case NewLine: // \n or \r
    %%%%%:  789-block  0
    #####:  790:        Console::Log(Curr());
    %%%%%:  790-block  0
    #####:  791:        SkipNewLine();
    %%%%%:  791-block  0
    #####:  792:        goto start; // Does this so 2 function calls aren't wasted.
    %%%%%:  792-block  0
    #####:  793:      case Char:
    #####:  794:        Console::Log(Colors::GREEN, "'", Next(1), "'", Colors::RESET);
    %%%%%:  794-block  0
    #####:  795:        break;
    %%%%%:  795-block  0
        2:  796:      case Whitespace: // Skip whitespace
        2:  796-block  0
        2:  797:        Console::Log(Curr());
        2:  797-block  0
        2:  798:        Next(1);
        2:  798-block  0
        2:  799:        Kind = TokenKindClass[Curr()];
        2:  800:        goto start;
        2:  800-block  0
    #####:  801:      case Dot: {
    #####:  802:        auto s1 = TokenKindClass[Peek(1)];
    %%%%%:  802-block  0
    #####:  803:        auto s2 = TokenKindClass[Peek(2)];
    #####:  804:        auto s3 = TokenKindClass[Peek(3)];
        -:  805:
    #####:  806:        match (Kind, s1) {
    #####:  807:          group(TokenKind::Dot, TokenKind::Dot):
    #####:  808:            s2 == TokenKind::Dot ?
    %%%%%:  808-block  0
    #####:  809:                       Console::Log("...") :
    %%%%%:  809-block  0
    #####:  810:                       Console::Log("..");
    %%%%%:  810-block  0
    #####:  811:            break;
    %%%%%:  811-block  0
    #####:  812:          default:
    #####:  813:            Console::Log(".");
    %%%%%:  813-block  0
    #####:  814:            break;
    %%%%%:  814-block  0
        -:  815:        }
    #####:  816:        break;
    %%%%%:  816-block  0
        -:  817:      }
        -:  818:        // Cannot be generated by the TokenKind table, assigned after checks
    #####:  819:      case EqualsEquals:
        -:  820:      case Pow:
        -:  821:      case Boolean:
    #####:  822:        UNREACHABLE;
    %%%%%:  822-block  0
    #####:  823:        break;
    %%%%%:  823-block  0
    #####:  824:      case Error:
    #####:  825:        Buffer = 0;
    #####:  826:        break;
    %%%%%:  826-block  0
    #####:  827:      default:
        -:  828:        //Console::Log(Curr());
    #####:  829:        break;
    %%%%%:  829-block  0
        -:  830:    }
        -:  831:  }
        4:  832:  Next(Instance.Length());
        4:  832-block  0
        4:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
